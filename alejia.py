# AUTOGENERATED! DO NOT EDIT! File to edit: Alejia_(Campaign_Advisor) (1).ipynb.

# %% auto 0
__all__ = []

# %% Alejia_(Campaign_Advisor) (1).ipynb 3
import os
os.environ['NEOS_EMAIL'] = 'aham225.driver@gmail.com'

# %% Alejia_(Campaign_Advisor) (1).ipynb 8
from datetime import datetime

import streamlit as st

from streamlit_jupyter import StreamlitPatcher, tqdm

import stripe

import webbrowser 


stripe.api_key="sk_test_51NTqAeKWaeNLfJo8WSdnChi79lRBgA7PLhjxIpIbm0kuHZBEXHQ6ffp7uJ3CS1vuTHTYarlvYZ8jgacrLy5YvdPW00gmRia5wp"
def create_payment_session():
    session = stripe.checkout.Session.create(
        success_url='https://www.google.com/',
        cancel_url='https://www.facebook.com',
        payment_method_types=['card'],
        line_items=[{
            'price': 'price_1NTuWkKWaeNLfJo8En5t2PGa',
            'quantity': 1,
        }],
        mode='payment',
    )
    return session


with st.sidebar:
# %% Alejia_(Campaign_Advisor) (1).ipynb 9
  n = st.text_input("How many programs/channels are you planning to have?",'2')
  n = int(n)

  # %% Alejia_(Campaign_Advisor) (1).ipynb 10
  m = st.text_input("How many segments are there in your targeted audience?",'2')
  m = int(m)

  # %% Alejia_(Campaign_Advisor) (1).ipynb 11
  channels = []
  channels_cost = {}
  for i in range(n):
    
    channel_n=st.text_input(f"Input the name of your next program/channel {i}:", key=f"channel_input_{i}")
    channels.append(channel_n)
    costy = st.text_input(f"Input the cost in GBP for channel {i+1}:", key=f"cost_input_{i}")
    channels_cost[i] = int(costy) if costy else 0

  # %% Alejia_(Campaign_Advisor) (1).ipynb 12
  channels = []
  cost = {}
  cnsrt = {}
  x = {}
  for i in range(n):
    channels.append(st.text_input("Enter the name of your next program/channel",'channel{}'.format(str(i))))
    channel_costy = st.text_input(f"Enter the cost in GBP for channel {i+1}:", key=f"cost_inputu_{i}")
    cost[i+1] = int(channel_costy) if channel_costy else 0
    cnsrty = st.text_input("Enter expected minimum number of views", key="cnsrty_inputytt_" + str(i))
    cnsrt[i+1]= int(cnsrty) if cnsrty else 0
    for j in range(m):
      x.update({i+1: {j+1: int(st.text_input("Enter the current number of views from category {0} at channel {1} ".format(j,channels[i]),'0'))}})

# %% Alejia_(Campaign_Advisor) (1).ipynb 13
# if len(channels)==0:
#   channels = ['Facebook', 'Instagram', 'Email', 'Youtube', 'Twitter', 'TikTok']

  selected_channels = st.multiselect(
      "Selected marketing programs/channels: ",
      options=[channel for channel in channels],
      default=[channel for channel in channels],
  )

  # %% Alejia_(Campaign_Advisor) (1).ipynb 14
  budget = st.text_input("What's your budget?",'0')
  budget = int(budget)

  col1,col2,col3,col4,col5=st.columns(5)
  st.markdown(
        """
        <style>
        .button-9 {
        --b: 3px;   /* border thickness */
        --s: .45em; /* size of the corner */
        --color: #d00000;
        
        padding: calc(.5em + var(--s)) calc(.9em + var(--s));
        color: var(--color);
        --_p: var(--s);
        background:
            conic-gradient(from 90deg at var(--b) var(--b), #0000 90deg, var(--color) 0)
            var(--_p) var(--_p) / calc(100% - var(--b) - 2*var(--_p)) calc(100% - var(--b) - 2*var(--_p));
        transition: .3s linear, color 0s, background-color 0s;
        outline: var(--b) solid #0000;
        outline-offset: .6em;
        font-size: 16px;
        border: 0;
        user-select: none;
        -webkit-user-select: none;
        touch-action: manipulation;
        }

        .button-9:hover,
        .button-9:focus-visible {
        --_p: 0px;
        outline-color: var(--color);
        outline-offset: .05em;
        background-color: #370617; /* Hover color */
        }

        .button-9:active {
        background: var(--color);
        color: #fff;
        }


        </style>
        """,
        unsafe_allow_html=True
    )
  sts=False
  if col3.button("run",key='button-9'):
      session = create_payment_session()
      webbrowser.open(session.url)
      while True:
          if stripe.checkout.Session.retrieve(session.id).get("status") == 'complete':
              sts=True
              print("ok")
              break


# %% Alejia_(Campaign_Advisor) (1).ipynb 15
from pyomo.environ import *

# Define the data
n = 2
m = 2
cost = {1: 50, 2: 70}
cnsrt = {1: 28, 2: 12}
x = {1: {1: 10, 2: 8}, 2: {1: 6, 2: 12}}
budget = 150

model = ConcreteModel()

y = model.Var(range(1,n+1), domain=Binary)


# Create the model
model = ConcreteModel()

# Define the decision variables
model.x = Var(range(1, n+1), domain=NonNegativeReals)

# Define the objective function
model.cost = Objective(expr=sum(cost[i] * model.x[i] for i in range(1, n+1)), sense=minimize)

# Define the constraints
model.constraints = ConstraintList()
for j in range(1, m+1):
    model.constraints.add(sum(x[i][j] * model.x[i] for i in range(1, n+1)) >= cnsrt[j])
model.constraints.add(expr=sum(cost[i]*model.x[i] for i in range(1, n+1)) <= budget)

# Solve the model
opt = SolverFactory('cbc')  # Select solver
solver_manager = SolverManagerFactory('neos')  # Solve in neos server
results = solver_manager.solve(model, opt=opt)

# Print the results
if str(results.solver.termination_condition) == "optimal":
  #print(f"Minimum cost: ${model.cost():,.2f}")
  df = []
  for i in range(1, n+1):
    #print(f"Number of purchases/packages for {channels[i]}: {model.x[i]():,.0f}")
    df.append({'Channel': channels[i-1], 'Optimal Budget': model.x[i]()})
else:
    print("Solver did not find an optimal solution.")

# %% Alejia_(Campaign_Advisor) (1).ipynb 16
if sts:
  st.subheader("Minimum cost\n")

  st.text(f"{model.cost():,.2f} GBP")

  st.subheader("Marketing Optimal Budget Plan\n")
  st.write(df)
